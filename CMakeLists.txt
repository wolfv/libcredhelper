# CMakeList.txt : CMake project for FlexBase, include source and define
# project specific logic here.
#
cmake_minimum_required (VERSION 3.10)
set(CMAKE_CXX_STANDARD 17)

# Enable Hot Reload for MSVC compilers if supported.
if (POLICY CMP0141)
  cmake_policy(SET CMP0141 NEW)
  set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<IF:$<AND:$<C_COMPILER_ID:MSVC>,$<CXX_COMPILER_ID:MSVC>>,$<$<CONFIG:Debug,RelWithDebInfo>:EditAndContinue>,$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>>")
endif()

project ("libcred" VERSION 0.1.0 DESCRIPTION "a cross-platform credentials helper library")

include(GNUInstallDirs)
set(DEFAULT_BUILD_TYPE "Release")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${DEFAULT_BUILD_TYPE}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${DEFAULT_BUILD_TYPE}" CACHE STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)

option(BUILD_SHARED_LIBS "Build shared libraries (.dll/.so) instead of static ones (.lib/.a)" ON)
option(MYLIB_BUILD_EXAMPLES "Build libcred examples" OFF)


SET (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE INTERNAL "Single output directory for building all libraries.")

include_directories("include/")
add_library (libcred "src/libcred_win.cpp" "include/libcred.hpp")

target_compile_definitions(${PROJECT_NAME} PRIVATE "LIBCRED_EXPORTS=1")

install(TARGETS libcred
	EXPORT ${PROJECT_NAME}-targets
	ARCHIVE DESTINATION lib
	LIBRARY DESTINATION lib
	RUNTIME DESTINATION bin
)

if(MSVC)
    set(pdb_file "")
    set(pdb_file_destination "")

    if(BUILD_SHARED_LIBS)
        set(pdb_file "$<TARGET_PDB_FILE:libcred>")
        set(pdb_file_destination "bin")
    else()
        # TARGET_PDB_FILE does not work for pdb file generated by
        # the compiler during static library build, need to
        # determine it another way
        set(pdb_file "$<TARGET_FILE_DIR:libcred>/$<TARGET_FILE_PREFIX:libcred>$<TARGET_FILE_BASE_NAME:libcred>.pdb")
        set(pdb_file_destination "lib")
    endif()

    install(FILES "${pdb_file}"
        COMPONENT libcred
        CONFIGURATIONS Debug RelWithDebInfo
        DESTINATION "${pdb_file_destination}"
        OPTIONAL)
endif()

install(EXPORT ${PROJECT_NAME}-targets
    FILE libcred-config.cmake
    DESTINATION lib/cmake/libcred
)

install(FILES include/libcred.hpp DESTINATION include)